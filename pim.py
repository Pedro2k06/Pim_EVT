from colorama import init, Fore, Style
from datetime import datetime, timedelta
from faker import Faker
import json
import time


fake = Faker('pt_BR')  # Inicializa o Faker com o locale pt_BR


def gerar_dados_falsos(num_usuarios):
    usuarios = []
    for _ in range(num_usuarios):
        nome = fake.name()
        senha = fake.password(length=10, special_chars=False,
                              digits=True, upper_case=True, lower_case=True)
        nota = fake.random_int(min=7, max=10)
        idade = fake.random_int(min=12, max=20)

        # Gera data de entrada nos √∫ltimos 1 m√™s
        data_entrada = fake.date_between(start_date='-30d', end_date='today')

        # Calcula o tempo logado em dias
        tempo_logado = (datetime.today().date() -
                        data_entrada).days  # Tempo logado em dias

        usuarios.append({
            "nome": nome,
            "senha": senha,
            "nota": nota,
            "idade": idade,
            # Formata a data como string
            "data_entrada": data_entrada.strftime('%Y-%m-%d'),
            "tempo_logado": tempo_logado  # Tempo logado em dias
        })
    return usuarios


# Chamada da fun√ß√£o
usuarios_falsos = gerar_dados_falsos(20)  # Gera 20 usu√°rios falsos
with open("usuarios.json", "w", encoding="utf-8") as f:
    json.dump(usuarios_falsos, f, ensure_ascii=False, indent=4)

pessoa = {"nome": "Seu Nome", "idade": 30}  # Substitua pelos valores desejados

# Serializando: Python Para JSON
json_string = json.dumps(pessoa)

init()

usuarios = []
usuario_logado = None  # Inicializa a vari√°vel do usu√°rio logado

try:
    with open("usuarios.json", "r", encoding="utf-8") as f:
        usuarios = json.load(f)
except FileNotFoundError:
    usuarios = []


# PARTE DO LOGIN E CADASTRO

def login():
    global usuario_logado
    print("-" * 30)
    nome_de_usuario = input(
        Fore.MAGENTA + "Insira seu nome de aluno: " + Style.RESET_ALL)
    senha = input(
        Fore.MAGENTA + f"Insira sua senha {nome_de_usuario}: " + Style.RESET_ALL)

    for user in usuarios:
        if user["nome"] == nome_de_usuario and user["senha"] == senha:
            usuario_logado = user
            print(Fore.YELLOW + "CARREGANDO..." + Style.RESET_ALL)
            time.sleep(2)
            print(
                Fore.GREEN + f"Login feito com sucesso {nome_de_usuario}!" + Style.RESET_ALL)
            print(f"Sua nota atual √©: {user['nota']}")
            mini_cursos()
            return

    print(Fore.RED + "‚ùå Erro, tente novamente" + Style.RESET_ALL)


# Tentativa de carregar os dados dos usu√°rios e notas salvos
try:
    with open("usuarios_notas.json", "r", encoding="utf-8") as f:
        usuarios = json.load(f)
except FileNotFoundError:
    usuarios = []


def cadastro():
    print("-" * 30)
    nome_de_usuario = input("Crie seu nome de usu√°rio: ")

    for user in usuarios:
        if user["nome"] == nome_de_usuario:
            print(
                Fore.RED + "‚ùå Esse nome de usu√°rio j√° existe. Escolha outro!" + Style.RESET_ALL)
            return

    senha = input("Crie sua senha: ")

    # Solicita a idade e garante que seja um n√∫mero inteiro
    while True:
        idade_input = input("Digite sua idade: ")
        if idade_input.isdigit():
            idade = int(idade_input)
            break
        else:
            print(Fore.RED + "‚ùå Idade inv√°lida. Digite apenas n√∫meros." + Style.RESET_ALL)

    # Adiciona o novo usu√°rio com idade e nota
    usuarios.append({
        "nome": nome_de_usuario,
        "senha": senha,
        "idade": idade,
        "nota": 0
    })

    # Salva os dados no arquivo JSON
    with open("usuarios.json", "w", encoding="utf-8") as f:
        json.dump(usuarios, f, ensure_ascii=False, indent=4)

    print("‚úÖ Cadastro realizado com sucesso!")
# -----------------------------------------------------------MENU DOS CURSOS AQUIII


def mini_cursos():
    print(Fore.LIGHTCYAN_EX + "-" * 30)
    print(Fore.LIGHTMAGENTA_EX + "---- Bem vindo ao Pega o Bit üî• ----")
    print(Fore.LIGHTCYAN_EX + "-" * 30)
    print(Fore.LIGHTYELLOW_EX + "üß† [1] " + Fore.LIGHTWHITE_EX +
          "Curso de pensamento l√≥gico computacional üß†")
    print(Fore.LIGHTBLUE_EX + "ü§ñ [2] " + Fore.LIGHTWHITE_EX +
          "Curso de infraestrutura computacional ü§ñ")
    print(Fore.LIGHTGREEN_EX + "üëæ [3] " +
          Fore.LIGHTWHITE_EX + "Curso de ciberseguran√ßa üëæ")
    print(Fore.LIGHTRED_EX + "üìà [4] " + Fore.LIGHTWHITE_EX + "Suas notas üìà")
    print(Fore.LIGHTBLACK_EX + "‚ùå [5] " + Fore.LIGHTWHITE_EX + "SAIR... ‚ùå")
    print("-" * 30)
    opcao_de_cursos = input("Selecione as op√ß√µes acima: ")
    if opcao_de_cursos == "1":
        print("voce selecionou o curso de pensamento l√≥gico computacional ü§ñ")
        pensamento_logico_computacional()

    elif opcao_de_cursos == "2":
        print("voce selecionou o curso de infraestrutura computacional")
        infraestrutura_computacional()
    elif opcao_de_cursos == "3":
        print("voce selecionou o curso de ciberseguran√ßa")
        ciberseguran√ßa()
    elif opcao_de_cursos == '4':
        notas()
    elif opcao_de_cursos == "5":
        print("Saindo da plataforma...")
    else:
        print("Tente novamente")
# ---------------------------------------------------------DEF DOS CURSOS AQUI!!!!!!!!!!!!!!!


nota = 0  # Inicializando a pontua√ß√£o


def notas():
    global usuario_logado

    # Verificando se h√° um usu√°rio logado
    if usuario_logado is None:
        print("Nenhum usu√°rio logado. Realize o login primeiro.")
        login()  # Pode chamar a fun√ß√£o de login novamente se o usu√°rio n√£o estiver logado
        return

    print(f"Sua nota atual √©: {usuario_logado['nota']} pontos")
    input("Digite [Enter] para voltar ao menu...")
    mini_cursos()
    return
    print("Usu√°rio n√£o encontrado!")


def pensamento_logico_computacional():
    while True:
        print("-" * 30)
        print("----ü§ñ Bem-vindo ao curso de pensamento l√≥gico computacional ü§ñ-----")
        print("-" * 30)
        print("[1] ‚ñ™Ô∏è O que √© pensamento l√≥gico computacional?")
        print("[2] ‚ñ™Ô∏è Pilares do pensamento l√≥gico")
        print("[3] ‚ñ™Ô∏è Competencias e habilidades")
        print("[4] ‚ñ™Ô∏è Question√°rio")
        print("[5] ‚ñ™Ô∏è Voltar √† tela de cursos")
        opcao = input(Fore.LIGHTGREEN_EX +
                      "Escolha uma op√ß√£o: " + Style.RESET_ALL)
        print("-" * 30)

        if opcao == "1":
            print(
                "O pensamento computacional pode ser definido como uma habilidade\n"
                "para resolver problemas e desafios de forma eficiente, assim como\n"
                "um computador faria.\n\n"
                "Essa resolu√ß√£o pode ou n√£o envolver equipamentos tecnol√≥gicos, mas\n"
                "a sua base √© a explora√ß√£o de forma criativa, cr√≠tica e estrat√©gica\n"
                "dos dom√≠nios computacionais.\n\n"
                "Usar o pensamento computacional √© ver um desafio ou problema,\n"
                "refletir sobre ele, separ√°-lo em partes, resolver cada uma dessas\n"
                "partes da maneira mais l√≥gica e assertiva para depois chegar a um\n"
                "resultado final.\n"
            )
            input("Digite [Enter] para voltar ao menu...")

        elif opcao == "2":
            print(
                "Decomposi√ß√£o:\n"
                "üëâ Dividir o desafio em problemas menores para facilitar a compreens√£o.\n"
                "----------------------------------------------------------------------\n"
                "Abstra√ß√£o:\n"
                "üëâ Focar no essencial e deixar o que n√£o importa de lado.\n"
                "----------------------------------------------------------------------\n"
                "Reconhecimento de padr√£o:\n"
                "üëâ Identificar repeti√ß√µes e similaridades pra ajudar na resolu√ß√£o.\n"
                "----------------------------------------------------------------------\n"
                "Algoritmo:\n"
                "üëâ Criar uma sequ√™ncia l√≥gica de passos para resolver o problema.\n"
            )
            input("Digite [Enter] para voltar ao menu...")

        elif opcao == "3":
            print(
                "Competencias e habilidades trabalhadas no pensamento l√≥gico computacional\n"
                " ‚ñ™Ô∏è racioc√≠nio l√≥gico;\n"
                " ‚ñ™Ô∏è trabalho em grupo;\n"
                " ‚ñ™Ô∏è criatividade;\n"
                " ‚ñ™Ô∏è an√°lise de dados;\n"
                " ‚ñ™Ô∏è gest√£o de projetos;\n"
                " ‚ñ™Ô∏è programa√ß√£o;\n"
                " ‚ñ™Ô∏è codifica√ß√£o.\n"
            )
            input("Digite [Enter] para voltar ao menu...")

        elif opcao == "4":
            questionario_pensamento_computacional()

        elif opcao == "5":
            print("Voltando ao menu de cursos...")
            mini_cursos()
            break

        else:
            print("‚ö†Ô∏è Op√ß√£o inv√°lida")

# ---------------------------------------------
# FUN√á√ÉO DO QUESTION√ÅRIO


def questionario_pensamento_computacional():
    print("[1] Come√ßar")
    print("[2] Voltar")
    comecar_questionario = input("Insira a op√ß√£o acima: ")

    if comecar_questionario == "1":
        print("-" * 30)
        print("Qual das op√ß√µes representa os pilares do pensamento l√≥gico computacional?")
        print("-" * 30)
        print("(A)  - Decomposi√ß√£o e Nuvem")
        print("(B)  - Algoritmo e Reconhecimento facial")
        print("(C) - Abstra√ß√£o e Mouse")
        print("(D)- Reconhecimento de padr√£o e Abstra√ß√£o")
        # pra aceitar d ou D gustavo do futuro
        resposta = input("Resposta: ").strip().upper()

        if resposta == 'D':
            print(Fore.GREEN + "üòé‚úîÔ∏è Acertou" + Style.RESET_ALL)
            usuario_logado["nota"] += 1  # Atualiza a nota no usu√°rio logado
            # Atualiza tamb√©m a lista geral
            for u in usuarios:
                if u["nome"] == usuario_logado["nome"]:
                    u["nota"] = usuario_logado["nota"]
                    break
        else:
            print(Fore.RED + "‚ùå Errou" + Style.RESET_ALL)

        print("-" * 30)
        print("Qual das op√ß√µes corresponde as compet√™ncias e habilidades desenvolvidas no pensamento l√≥gico computacional.")
        print("-" * 30)
        print("(A)  - An√°lise de dados e teclados.")
        print("(B)  - Gest√£o de projetos e software")
        print("(C)  - Programa√ß√£o e codifica√ß√£o.")
        print("(D)  - Criatividade e LGPD.")
        resposta_1 = input("Resposta: ").strip().upper()

        if resposta_1 == "C":
            print(Fore.GREEN + "üòé‚úîÔ∏è Acertou" + Style.RESET_ALL)
            usuario_logado["nota"] += 1
            for u in usuarios:
                if u["nome"] == usuario_logado["nome"]:
                    u["nota"] = usuario_logado["nota"]
                    break
        else:
            print(Fore.RED + "‚ùå Errou" + Style.RESET_ALL)

        print("-" * 30)
        print("Como pode ser definido o pensamento computacional?")
        print("-" * 30)
        print("(A) - Habilidade para resolver problemas e desafios de forma eficiente")
        print('(B) - Pensamento baseado em computadores e hardware')
        print('(C) - Resolu√ß√£o de problemas relacionados a software')
        print('(D) - Pensamento formatado em Nuvem')
        resposta_3 = input("Resposta: ").strip().upper()

        if resposta_3 == "A":
            print(Fore.GREEN + "üòé‚úîÔ∏è Acertou" + Style.RESET_ALL)
            usuario_logado["nota"] += 1
            for u in usuarios:
                if u["nome"] == usuario_logado["nome"]:
                    u["nota"] = usuario_logado["nota"]
                    break
        else:
            print(Fore.RED + "‚ùå Errou" + Style.RESET_ALL)

        print("-" * 30)
        print("O que significa reconhecimento de padr√£o?")
        print("(A) - Divis√£o do desafio em problemas menores para facilitar a compreens√£o")
        print("(B) - Criar uma sequ√™ncia l√≥gica de passos para resolver o problema")
        print("(C) - Identificar repeti√ß√µes e similaridades pra ajudar na resolu√ß√£o")
        print("(D) - Identificar o padr√£o dos softwares utilizados")
        resposta_4 = input("Resposta: ").strip().upper()

        if resposta_4 == "C":
            print(Fore.GREEN + "üòé‚úîÔ∏è Acertou" + Style.RESET_ALL)
            usuario_logado["nota"] += 1
            for u in usuarios:
                if u["nome"] == usuario_logado["nome"]:
                    u["nota"] = usuario_logado["nota"]
                    break
        else:
            print(Fore.RED + "‚ùå Errou" + Style.RESET_ALL)

        # Salva as notas no arquivo JSON
        with open("usuarios_notas.json", "w", encoding="utf-8") as f:
            json.dump(usuarios, f, ensure_ascii=False, indent=4)

        print("-" * 30)
        input("Digite [Enter] para voltar ao menu...")

    elif comecar_questionario == "2":
        print("Voltando ao curso...")

    else:
        print("Tenta de novo üòÖ")


def infraestrutura_computacional():
    while True:
        print("-" * 30)
        print("Bem vindo ao curso de infraestrutura computacional")
        print("-" * 30)
        print("[1] - o que √© infraestrutura computacional? ")
        print("[2] - Componentes da infraestrutura computacional")
        print("[3] - question√°rio")
        print("[4] - voltar a tela de cursos")
        opcao_do_curso_2 = input("Selecione alguma das op√ß√µes acima: ")
        print("-" * 30)

        if opcao_do_curso_2 == '1':
            print("Infraestrutura de tecnologia da informa√ß√£o (TI) refere-se aos\n"
                  "componentes necess√°rios para operar e gerenciar ambientes corporativos de TI.\n"
                  "A infraestrutura de TI pode ser implantada em um sistema de cloud computing ou nas pr√≥prias instala√ß√µes da organiza√ß√£o.\n"
                  "Esses componentes incluem hardware, software, rede, sistema operacional e armazenamento de dados.\n"
                  "Todos eles s√£o usados para fornecer servi√ßos e solu√ß√µes de TI. As solu√ß√µes de infraestrutura de TI est√£o dispon√≠veis\n"
                  "como aplica√ß√µes de software para download. Elas s√£o executadas nos recursos de TI existentes,\n"
                  "como armazenamento definido por software, ou como solu√ß√µes online oferecidas por provedores de servi√ßos,\n"
                  "na forma de infraestrutura como servi√ßo (IaaS).\n"
                  )
            input("Digite [Enter] para voltar ao menu...")
        elif opcao_do_curso_2 == "2":
            print("Hardware\n"
                  "Hardware inclui servidores, datacenters, computadores pessoais, roteadores, switches e outros dispositivos.\n "
                  "As instala√ß√µes que abrigam, resfriam e fornecem energia aos datacenters tamb√©m fazem parte da infraestrutura.\n"
                  "--------------------------------------------------------------------------------------------------------------\n"
                  'Software\n'
                  'Software refere-se √†s aplica√ß√µes usadas pela empresa, como servidores web, sistemas de gerenciamento de conte√∫do e o sistema operacional, como o Linux¬Æ. \n'
                  'O sistema operacional √© respons√°vel por gerenciar o hardware e os recursos do sistema.\n '
                  'Ele tamb√©m conecta todos os recursos f√≠sicos e de software que executam tarefas.\n'
                  '---------------------------------------------------------------------------------------------------------------\n'
                  'Rede\n'
                  'Os componentes interconectados da rede possibilitam a comunica√ß√£o, o gerenciamento e as opera√ß√µes de\n'
                  'rede entre os sistemas internos e externos. A rede √© formada pela conex√£o √† internet, ativa√ß√£o da rede,\n'
                  'firewalls e seguran√ßa, al√©m de hardwares como roteadores, switches e cabos.\n'

                  )
            input("Digite [Enter] para voltar ao menu...")

        elif opcao_do_curso_2 == '3':
            questionario_infraestrutura_computacional()

        elif opcao_do_curso_2 == "4":
            print("Voltando ao menu de cursos...")
            mini_cursos()
            break

        else:
            print(" Op√ß√£o inv√°lida, tenta de novo meu consagrado!")


def questionario_infraestrutura_computacional():
    print("-" * 30)
    print("[1] Come√ßar")
    print("[2] Voltar")
    print("-" * 30)
    come√ßar_questionario_1 = input("Insira a op√ß√£o acima: ")

    if come√ßar_questionario_1 == '1':
        print("-" * 30)
        print('Qual das op√ß√µes abaixo representam os componentes da infraestrutura de TI?')
        print("-" * 30)
        print('(A) - Hardware e Nuvem')
        print('(B) - Software e Rede')
        print('(C) - Rede e internet')
        print("(D) - Software e Hardware")
        resposta_questionario_infra_1 = input("Resposta: ").strip().upper()
        if resposta_questionario_infra_1 == 'D':
            print(Fore.GREEN + "üòé‚úîÔ∏è Acertou" + Style.RESET_ALL)
            usuario_logado["nota"] += 1  # Atualiza a nota no usu√°rio logado
            # Atualiza tamb√©m a lista geral
            for u in usuarios:
                if u["nome"] == usuario_logado["nome"]:
                    u["nota"] = usuario_logado["nota"]
                    break
        else:
            print(Fore.RED + "‚ùå Errou" + Style.RESET_ALL)
        print("-" * 30)
        print('Qual das op√ß√µes abaixo √© a rede essencial para a comunica√ß√£o dos sistemas?')
        print("-" * 30)
        print('A - Internet')
        print('B - Nuvem')
        print('C - Hardware')
        print('D - Software')
        resposta_questionario_infra_2 = input("Resposta: ").strip().upper()

        if resposta_questionario_infra_2 == 'A':
            print(Fore.GREEN + "üòé‚úîÔ∏è Acertou" + Style.RESET_ALL)
            usuario_logado["nota"] += 1  # Atualiza a nota no usu√°rio logado
            # Atualiza tamb√©m a lista geral
            for u in usuarios:
                if u["nome"] == usuario_logado["nome"]:
                    u["nota"] = usuario_logado["nota"]
                    break
        else:
            print(Fore.RED + "‚ùå Errou" + Style.RESET_ALL)
        print("-" * 30)
        print("Ao que se refere a Infraestrutura da tecnologia da informa√ß√£o?")
        print("-" * 30)
        print("(A) - Aos componentes necess√°rios para operar e gerenciar ambientes corporativos de TI")
        print("(B) - Aos softwares necess√°rios para desenvolvimento dentro dos ambientes corporativos de TI")
        print("(C) - A infraestrutura da constru√ß√£o do ambiente de trabalho dos profissionais de TI")
        print("(D) - A instala√ß√µes que abrigam, resfriam e fornecem energia aos datacenters dos ambientes de TI")

        resposta_questionario_infra_3 = input("Resposta: ").strip().upper()

        if resposta_questionario_infra_3 == 'A':
            print(Fore.GREEN + "üòé‚úîÔ∏è Acertou" + Style.RESET_ALL)
            usuario_logado["nota"] += 1
            for u in usuarios:
                if u['nome'] == usuario_logado['nome']:
                    u["nota"] = usuario_logado['nota']
                    break
        else:
            print(Fore.RED + "‚ùå Errou" + Style.RESET_ALL)

        print("O que define o termo Software?")
        print("(A) - Aplica√ß√µes utilizadas para gerenciar os hardwares e os recursos do sistema")
        print("(B) - Componentes interconectados de rede")
        print("(C) - Aos componentes necess√°rios para utiliza√ß√£o dos computadores, como teclado e mouse")
        print("(D) - A sistemas pertencentes √∫nica e exclusivamente a servidores em Nuvem")
        resposta_questionario_infra_4 = input("Resposta: ").strip().upper()

        if resposta_questionario_infra_4 == 'A':
            print(Fore.GREEN + "üòé‚úîÔ∏è Acertou" + Style.RESET_ALL)
            usuario_logado["nota"] += 1

            for u in usuarios:
                if u['nome'] == usuario_logado['nome']:
                    u["nome"] = usuario_logado['nota']
                    break
        else:
            print(Fore.RED + "‚ùå Errou" + Style.RESET_ALL)

        # Salva as notas no arquivo JSON
        with open("usuarios_notas.json", "w", encoding="utf-8") as f:
            json.dump(usuarios, f, ensure_ascii=False, indent=4)

        print("-" * 30)

        input("Digite [Enter] para voltar ao menu...")

    elif come√ßar_questionario_1 == "2":
        print("Voltando ao curso...")

    else:
        print("Tenta de novo üòÖ")


def ciberseguran√ßa():
    while True:
        print("-" * 30)
        print("----Bem vindo ao curso de ciberseguran√ßa----")
        print("-" * 30)
        print("[1] ‚ñ™Ô∏è O que √© ciberseguran√ßa?")
        print("[2] ‚ñ™Ô∏è Tipos de ciberseguran√ßa")
        print("[3] ‚ñ™Ô∏è Amea√ßas comuns a ciberseguran√ßa")
        print("[4] ‚ñ™Ô∏è questionario")
        print("[5] ‚ñ™Ô∏è Voltar ao menu de cursos")
        opcao_do_curso_3 = input("Escolha uma op√ß√£o: ")

        if opcao_do_curso_3 == "1":
            print("A ciberseguran√ßa refere-se a quaisquer tecnologias, pr√°ticas e pol√≠ticas que atuem na preven√ß√£o de ataques cibern√©ticos ou na mitiga√ß√£o\n"
                  "do seu impacto. A ciberseguran√ßa tem como objetivo proteger sistemas de computador, aplica√ß√µes\n"
                  "dispositivos, dados, ativos financeiros e pessoas contra ransomwares e outros malwares, golpes de phishing\n"
                  "roubo de dados e outras amea√ßas cibern√©ticas.\n"
                  )
            input("Digite [Enter] para voltar ao menu...")
        elif opcao_do_curso_3 == "2":
            print("Tipos de ciberseguran√ßa:\n"
                  " ‚ñ™Ô∏è Seguran√ßa de IA\n"
                  ' ‚ñ™Ô∏è Seguran√ßa da infraestrutura cr√≠tica\n'
                  ' ‚ñ™Ô∏è Seguran√ßa de rede\n'
                  ' ‚ñ™Ô∏è Seguran√ßa de endpoints\n'
                  ' ‚ñ™Ô∏è Seguran√ßa de aplicativos\n'
                  ' ‚ñ™Ô∏è Seguran√ßa na nuvem\n'
                  ' ‚ñ™Ô∏è Seguran√ßa da informa√ß√£o\n'
                  ' ‚ñ™Ô∏è Seguran√ßa m√≥vel\n'
                  )
            input("Digite [Enter] para voltar ao menu...")
        elif opcao_do_curso_3 == "3":
            print('Amea√ßas comuns √† ciberseguran√ßa:\n'

                  ' ‚ñ™Ô∏è Malware\n'
                  ' ‚ñ™Ô∏è Ransomware\n'
                  ' ‚ñ™Ô∏è Phishing\n'
                  ' ‚ñ™Ô∏è Roubo e abuso de credenciais\n'
                  ' ‚ñ™Ô∏è Amea√ßas internas\n'
                  ' ‚ñ™Ô∏è Ataques de IA\n'
                  ' ‚ñ™Ô∏è Cryptojacking\n'
                  ' ‚ñ™Ô∏è Distributed denial-of-service (DDoS)\n'
                  )
            input("Digite [Enter] para voltar ao menu...")
        elif opcao_do_curso_3 == "4":
            questionario_ciberseguran√ßa()

        elif opcao_do_curso_3 == "5":
            print("Voltando ao menu de cursos...")
            mini_cursos()
            break

        else:
            print(Fore.RED + "‚ö†Ô∏è Op√ß√£o inv√°lida" + Style.RESET_ALL)


def questionario_ciberseguran√ßa():
    print("[1] Come√ßar")
    print("[2] Voltar")
    come√ßar_questionario_2 = input("Insira a op√ß√£o acima:")

    if come√ßar_questionario_2 == '1':
        print("-" * 30)
        print("1 - Quais os tipos de ciberseguran√ßa\n"

              "(A) - Seguran√ßa de IA e seguran√ßa de internet\n"
              "(B) - Seguran√ßa de rede e hardware\n"
              "(C) - Seguran√ßa m√≥vel e seguran√ßa de aplicativos.\n"
              "(D) - Seguran√ßa na nuvem e seguran√ßa da ti.\n"
              )
        resposta_ciber_1 = input("Insira a sua resposta: ").strip().upper()
        if resposta_ciber_1 == "C":
            print(Fore.GREEN + "üòé‚úîÔ∏è Acertou" + Style.RESET_ALL)
            usuario_logado["nota"] += 1  # Atualiza a nota no usu√°rio logado
            # Atualiza tamb√©m a lista geral
            for u in usuarios:
                if u["nome"] == usuario_logado["nome"]:
                    u["nota"] = usuario_logado["nota"]
                    break
        else:
            print(Fore.RED + "‚ùå Errou" + Style.RESET_ALL)

        print("O que √© ciberseguran√ßa?")
        print("(A) - Conjunto de jogos online que simulam invas√µes de computadores")
        print("(B) - M√©todo de acelerar a conex√£o de internet usando antiv√≠rus")
        print("(C) - Tecnologias, pr√°ticas e pol√≠ticas de preven√ß√£o a ataques cibern√©tico")
        print("(D) - Programa de edi√ß√£o de v√≠deos com prote√ß√£o contra v√≠rus")
        resposta_ciber_2 = input("Insira sua resposta: ").strip().upper()

        if resposta_ciber_2 == "C":
            print(Fore.GREEN + "üòé‚úîÔ∏è Acertou" + Style.RESET_ALL)
            usuario_logado["nota"] += 1  # Atualiza a nota no usu√°rio logado

            for u in usuarios:
                if u["nome"] == usuario_logado["nome"]:
                    u["nota"] = usuario_logado["nota"]
                    break
        else:
            print(Fore.RED + "‚ùå Errou" + Style.RESET_ALL)

        # Salva as notas no arquivo JSON
        with open("usuarios_notas.json", "w", encoding="utf-8") as f:
            json.dump(usuarios, f, ensure_ascii=False, indent=4)

        print("-" * 30)
        input("Digite [Enter] para voltar ao menu...")

    elif come√ßar_questionario_2 == "2":
        print("Voltando ao curso...")

    else:
        print("Tenta de novo üòÖ")

# ----------------------------------------------------------LOGIN E CADASTRO AQUI


def login_ou_cadastro():
    print("\n" + "-" * 30)
    print("[1] ‚ñ™Ô∏è Login")
    print("[2] ‚ñ™Ô∏è Cadastro")
    print("[3] ‚ùå Voltar")
    print("-" * 30)
    escolha = input("Escolha uma op√ß√£o: ")

    if escolha == "1":
        login()
    elif escolha == "2":
        cadastro()
    elif escolha == "3":
        return
    else:
        print("Erro, tente novamente")


def sobre():
    while True:
        print("" + "-" * 30)
        print("Nossa plataforma ajuda na inclus√£o digital, com foco estudantil!")
        print("Ela foi criada por alunos da UNIP. Ela inclui 3 cursos de tecnologia")
        print(
            "O m√°ximo de nota que o aluno pode tirar, ser√° 10 pontos no final (BOA SORTE üòÅ)")
        print("[1] Voltar")
        voltar = input("‚¨ÖÔ∏è  Digite o n√∫mero [1] para voltar: ")
        print("-" * 30)
        if voltar == "1":
            return
        else:
            print("tente novamente")
# ----------------------------------------------------MENU INICIAL AQUI


def menu():
    while True:
        print(Fore.LIGHTCYAN_EX + "-" * 30)
        print(Fore.LIGHTMAGENTA_EX + "---- Bem vindo ao MENU do Pega o Bit üî• ----")
        print(Fore.LIGHTCYAN_EX + "-" * 30)
        print(Fore.LIGHTMAGENTA_EX + "[1] " +
              Fore.LIGHTWHITE_EX + "üîí Login / Cadastro")
        print(Fore.LIGHTMAGENTA_EX +
              "[2] " + Fore.LIGHTWHITE_EX + "üìú Sobre a nossa plataforma")
        print("[3] " + Fore.LIGHTWHITE_EX + "‚ùå Sair")
        print("-" * 30)
        opcao = input("Digite o n√∫mero que deseja acessar: ")

        if opcao == "1":
            login_ou_cadastro()
        elif opcao == "2":
            sobre()
        elif opcao == "3":
            print("\nsaindo da plataforma...")
            break
        else:
            print("-------> op√ß√£o invalida, tente novamente")


menu()
